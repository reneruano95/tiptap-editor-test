.ProseMirror {
  @apply p-12 px-8 sm:px-12 caret-black dark:caret-white outline-0 pr-8 z-0 lg:pl-8 lg:pr-8;

  & > * {
    @apply mx-auto max-w-2xl;
  }

  .is-empty::before {
    @apply text-neutral-500 dark:text-neutral-400;
  }

  & > * + * {
    @apply mt-2;
  }

  .selection {
    @apply inline;
  }

  .selection,
  *::selection {
    @apply bg-black/10 dark:bg-white/20;
  }

  & > .react-renderer {
    @apply my-3 first:mt-0 last:mb-0;
  }

  &.resize-cursor {
    @apply cursor-col-resize;
  }

  .ProseMirror-gapcursor {
    @apply relative w-full max-w-2xl mx-auto;

    &:after {
      @apply border-t-black/40 dark:border-t-white/40 w-full -top-[1.5em] max-w-2xl mx-auto left-0 right-0;
    }
  }
}

[data-theme="slash-command"] {
  width: 1000vw;
}

/* Custom image styles */
.ProseMirror img {
  transition: filter 0.1s ease-in-out;

  &:hover {
    cursor: pointer;
    filter: brightness(90%);
  }

  &.ProseMirror-selectednode {
    outline: 3px solid #5abbf7;
    filter: brightness(90%);
  }
}

.img-placeholder {
  position: relative;

  &:before {
    content: "";
    box-sizing: border-box;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: 3px solid var(--novel-stone-200);
    border-top-color: var(--novel-stone-800);
    animation: spinning 0.6s linear infinite;
  }
}

@keyframes spinning {
  to {
    transform: rotate(360deg);
  }
}

.ProseMirror:not(.dragging) .ProseMirror-selectednode {
  outline: none !important;
  background-color: var(--novel-highlight-blue);
  transition: background-color 0.2s;
  box-shadow: none;
}

@import "./partials/code.css";
@import "./partials/lists.css";
@import "./partials/placeholder.css";
@import "./partials/table.css";
@import "./partials/typography.css";
